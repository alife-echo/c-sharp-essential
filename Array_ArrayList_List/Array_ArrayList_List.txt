
# -- Apresentação



Coleções --> formam uma importante estrutura de dados para criar e gerenciar grupos de objetos relacionados

Existe duas maneiras de agrupar objetos:

1 - Criando Arrays de Objetos
2 - Criando Coleções de Objetos

Os arrays são uteis para criar e trabalhar com um número fixo de objetos do mesmo tipo

As coleções fornecem uma maneira mais flexivel de trabalhar com grupos de objetos



1 - Coleções não genericas presentes no namespace System.Collections:

ArrayList,Stack,SortedList,Queue,Hashtable, etc.


2 - As coleções Genéricas presentes no namespaces System.Collections.Generic:

List,SortedList,Stack,Queue,HashSet,SortedSet,Dictionary,SortedDictionary






# -- Arrays


Os arrays são um conjunto de elementos de mesmo tipo de dados e de tamanho fixo

Um array de uma dimensão é conhecido como vetor,enqunato de mais de uma dimensão e conhecido como matriz

Array é usado para armazenar mais de um valor literal do mesmo tipo em uma variável de mesmo nome




sintaxe array:

tipo dos elementos abrindo e fechando colchetes seguido do nome da variável que identifica o array

TipoDados[] NomeDoArray;




ex:

int[] numeros; --> sem alocar valor

int[] numeros = new int[10] {1,2,3,4,5,6,7,8,9,10}; --> atribuindo valor

string[] nomes;

string[] nomes = new string[5] {"Maria","Eva","Pedro","Ana","Ada"}


//declaração do array
int[] numeros;

//alocação memoria
numeros = new int[10] {1,2,3,4,5,6,7,8,9,10};



Simplificação:

string[] nomes = new string[5] { "Maria", "Marta", "Roberta", "Dhen", "Ruby" };

string[] nomes1 = new string[] { "Maria", "Marta", "Roberta", "Dhen", "Ruby" };

string[] nomes2 =  { "Maria", "Marta", "Roberta", "Dhen", "Ruby" };





-- Acessando os elementos do array


Os elementos do array podem ser acessados usando um índice

Um índice é um número associado a cada elemento da matriz, começando com o valor 0 e terminando com o tamanho do array menos - 1


int[] numeros = new int[] {1,2,3,4,5,6,7,8,9,10};

		Array com elementos do tipo int
	     [1,2,3,4,5,6,7,8,9,10]
indice	 0,1,2,3,4,5,6,7,8,9
	

numeros[7] --> 8
 
           [Maria,Eva,Pedro,Ana,Ada]
 indice       0    1   2     3   4
 
nomes[1] --> Eva



int[] numeros = new int[10] --> sera criado 10 elemementos com valor zero por padrão,se for string sera null por padrão

se eu tentar atribuir um valor fora dos limites do array ocorrera um erro --> Index was outside the bounds of the array








# -- Arrays II



-- Acessando os elementos de um Array usando uma laçõ for

Podemos usar um laço for para percorrer elementos de um array

Usamos a proprieadade Length da classe Array para definir o tamanho do Array no laço for

A classe Array esta no namespace System e fornece diversas propriedades e métodos para trabalhar com um array
(Length,Rank,Copy,Clear,Sort,etc)


ex:

string[] nomes = { "Ana", "Maria", "Marta", "Paulo", "Carlos" };
int[] numeros = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10 };

for (int i = 0; i < numeros.Length; i++)
{
    Console.WriteLine($"Elemento de índice {i} : {numeros[i]}");
}
Console.WriteLine("-------------------------------------------");
for (int i = 0;i < nomes.Length; i++)
{
    Console.WriteLine($"Elemento de índice {i} : {nomes[i]}");
}




# -- Arrays III

-- Acessando os elementos de um array usando um laço foreach

Podemos usar o laço foreach para ler/recuperar elementos de um array sem precisar usar o índice nem definir o tamanho do array

A instrução foreach permite executar uma instrução ou um bloco de instruções para cada elemento presente em uma coleção (Array,List,ArrayList,Stack,Queue,etc)

Sintaxe:

foreach(tipo elemento in coleção)
{
  // instrução ou bloco de instruções
}


em parenteses criamos um elemento do tipo utilizado na coleção e, com operador in, informamos a coleção a ser percorrida


vantagens foreach:

- não precisamos definir a inicialização
- não precisamos definir uma condição de parada pois isso é definido de forma implícita,pelo tamanho da coleção
- a instrução foreach usa a palavra-chave 'in' para iterar sobre cada item da coleção
- o número de iterações do laço foreach é igual ao total de itens da coleção





# -- Classe Array


Fornece metodos para trabalhar com arrays

Classe base para os arrays

Metodos Principais:

Reverse --> Inverte a sequencia de um array unidimensional

Ex: Array.Reverse(nome_array);

2 - Sort - Ordena os arrays

Ex: Array.Sort(nome_array);

3 - BinarySearch - Faz a busca em um array ordenado de um valor usando o algoritimo de busca binário. Se for encontrado será retornado o valor do índice do elemento,
caso contrario será retornado um número negativo

Array.BinarySearch(nome_array,objeto)





Exemplos:


string[] nomes = { "Ana", "Maria", "Dinair", "Paulo", "Carlos", "Beatriz" };

Console.WriteLine("Exibindo o array original\n");

ExibeArray(nomes);

Console.WriteLine("Invertendo ordem do array\n");

Array.Reverse(nomes);
ExibeArray(nomes);

Console.WriteLine("Ordenando Array \n");
Array.Sort(nomes); 
ExibeArray(nomes);

Console.WriteLine("Localizando item array");
string? nome = Console.ReadLine();

var indice = Array.BinarySearch(nomes, nome);

if(indice >= 0)
{
    Console.WriteLine($"{nome} foi encontrado com índice = {indice}");
}
else
{
    Console.WriteLine($"{nome} não foi encontrado");
}


static void ExibeArray(string[] nomes)
{
    foreach (string nome in nomes)
    {
        Console.WriteLine(nome);
    }
}






# - Modificador Params


Maneira de criar um numero ilimitado de argumentos

Aceita um numeros variado de argumentos

Precisa de um array unidimesional

nenhuma parametro adicional é permitido apos a declaração do params

apenas uma palavra chave params é permitida

Deve ser o ultimo argumento na lista de parâmetros do método

se o array for não for unidimensional sera retornado um erro CS0225




Ao colocar params do metodo,podemos passar:

Uma lista separada por vírgulas de argumentos do tipo dos elementos do array

um array de argumentos do tipo especificado

se não tiver nenhum argumento, o comprimento da lista de parâmetros será zero




exemplo de uso:

NomeDoMetodo(param tipo[] nomeVariavel){}

MeuMetodo(string a,int b,int c = 1, params int[] numeros) {}




sem params:

int[] valores = { 1, 2, 3 };

var resultado = Calcular.Soma(valores); --> passo array na chamada do metodo
Console.WriteLine(resultado);

public class Calcular
{
    public static int Soma(int[] numeros)
    {
        int total = 0;

        foreach (var numero in numeros)
        {
            total += numero;    
        }
        return total;
    }
}




com params:


int[] valores = { 1, 2, 3 };

var resultado = Calcular.Soma(valores);
Console.WriteLine(resultado);


var res2 = Calcular.Soma(1,2,3,4,5,6); --> passo os valores diretamente na chamada do metodo

Console.WriteLine(res2);

public class Calcular
{
    public static int Soma(params int[] numeros)
    {
        int total = 0;

        foreach (var numero in numeros)
        {
            total += numero;    
        }
        return total;
    }
}














# -- Arrays MultiDimensionais



C# suporta arrays de ate 32 dimensões 

Um array com mais de uma dimensão é basicamente um array de array

Um array multidimensional pode ser declarado adicionando virgulas entre colchetes na declaração do array


Tipo [,] nome --> bidimensional --> Ex: int[,] array2d;

Tipo [,,] nome --> tridimensional --> Ex: int[,,] array3d;

Tipo [,,] nome --> quadridimensional --> Ex: int[,,,] array3d;



Array Bidimensional --> tabela

Ex int[3,3] a; -->  3 linhas e 3 colunas



-- Identificação de elemento no array


               coluna 0            coluna 1      coluna 2

linha 0        a[0,0]               a[0,1]       a[0,2]


linha 1        a[1,0]               a[1,1]       a[1,2]


linha 2        a[2,0]               a[2,1]       a[2,2]



Cada elemento no array é identificado por um nome de elemento na forma a[i,j]

a -> nome do array

i -> linha

j -> coluna





-- Array Bidimensional - Declaração

int[,] array1 = new int [3,3];

Bidimensional

3 linhas e 3 colunas

array1 pode armazenar apenas 9 elementos. (3 * 3)




-- Array Bidimensional - Inicialização


int [,] a;       a=> null

a = new int[2,2]; --> atribui valores padrão que é zero

a = new int[2,2] {{1,2},{2,3}};

a = new int[2,2] {
			{0,1},
			{2,3}
			};

int[,] a = {{0,1} {2,3}}; --> maneira simplificada



exemplo:

// See https://aka.ms/new-console-template for more information
Console.WriteLine("Arrays MultiDimensionais");


int[,] a;

a = new int[2, 2];


a[0, 0] = 10;
a[0, 1] = 11;
a[1, 0] = 12;
a[1, 1] = 13;


Console.WriteLine(a[0,0]);
Console.WriteLine(a[0,1]);
Console.WriteLine(a[1,0]);
Console.WriteLine(a[1,1]);


int[,] b = new int[2, 2] { {20,30}, {40,50} };

Console.WriteLine(b[0, 0]);
Console.WriteLine(b[0, 1]);
Console.WriteLine(b[1, 0]);
Console.WriteLine(b[1, 1]);







# -- Arrays MultiDimensionaisII


Podemos usar um laço for para ler e recuperar os valores dos elementos de um array bidimesional definindo um laço for
para cada uma das dimensões do array

Para obter as dimensões do array usamos o método GetLength(n), onde a primeira dimensão inicia com zero (n=0)


ex:

int[,] array1 = new int[2, 3] { { 1, 4, 2 }, { 3, 6, 8 } };


for(int i = 0; i < array1.GetLength(0); i++)
{
    for(int j = 0; j < array1.GetLength(1); j++)
    {
        Console.WriteLine(array1[i,j]);
    }
}



GetLength(0) --> percorra primeira dimensão --> i
GetLenght(1) --> percorra segunda dimensão --> j


'Index was outside the bounds of the array' --> acessar um indice que não existe





exemplo:


int[,] array1 = new int[2, 3] { { 1, 4, 2 }, { 3, 6, 8 } };

int[,] array2 = new int[2, 3] { {2,9,3}, {5,1,4} };


for(int i = 0; i < array1.GetLength(0); i++)
{
    for(int j = 0; j < array1.GetLength(1); j++)
    {
        Console.Write(array1[i,j]);
    }
    Console.WriteLine();
}

Console.WriteLine("Foreach");

foreach (int n in array2)
{
    Console.Write(n);
}






# -- Array List I


Um arraylist é uma coleção não generica cujo tamanho pode ser alterado dinamicamente e que armazena  elementos de vários tipos de dados

Esta coleção é uma alternativa ao array e também pode ser indexada individualmente e permite alocação dinâmica de memória,inclusão,pesquisa e classificação de elementos na coleção


O tamanho do ArrayList aumenta de forma dinamica, os elementos posssuem um índice que começa com valor 0 incremetando de 1 em 1



# -- ArrayList - construtores


ArrayList esta no namespace System.Collections possui 3 construtores usados para criar um ArrayList



ArrayList() --> cria uma instancia arraylist vazia e sem capacidade inicial 

(Capacity e Count) --> Propriedades

Capacity --> Defini a Capacidade do ArrayList

Count --> Obter o número de elementos do arrayList

ArrayList(Int32) --> Cria uma instancia de arrayList vazio, porem com uma capacidade inicial Definida

ArrayList(ICollection) --> Cria uma ArrayList, porem com as configurações de outra collection criada




# -- ArrayList - Declaração, instanciação e inclusão de elementos

Criar --> Palavra chave new e a seguir usar o metodo Add ou Object Initializer para adicionar valores a arrayList



Maneiras de Criar ArrayList:

ArrayList lista = new ArrayList();

var lista = new ArrayList();	

ArrayList lista = new();

Valores padrão ArrayList não inicializada:
Capacity = 0;
Count = 0;


ArrayList lista = new ArrayList(5); -> Capacity 5

var lista = new ArrayList(5);	-> Capacity 5

ArrayList lista = new(5);       -> Capacity 5




# -- Adicionando valores ArrayList

ArrayList lista = new(); --> não atribui capacidade, arraylist não precisa

lista.Add("Paulo");
lista.Add(4.5);
lista.Add(5);
lista.Add(true);
lista.Add(" ");
lista.Add(null);

Count = 6
Capacity = 8

ArrayList trabalha a capacidade de 4 em 4, se possuo 6 elementos , então passei da capacidade 4 logo preciso aumentar mais 4 na capacidade,assim por diante

ArrayList aceita todos os tipos de dados, diferente do array.




# -- Adicionando valores ArrayList por object initializer

var lista = new ArrayList() 
 			{
 			"Paulo",4.5,5,true," ",null"
 			};








# -- ArrayList II

 - Adicionar Elementos
 
Add --> O método Add permite incluir um único elemento ao final de uma arralist
 
Método Insert(int index,Object value) --> permite incluir um elemento em uma posição qualquer usando um índice especifico

var lista = new ArrayList() {"Maria",5,true,null}; 
 
ex:

lista.Add(3.5);

lista.Insert(3,"Paulo");



-- Adicionando coleção de elementos


 Podemos adicionar uma coleção de elementos a um ArrayList usando os métodos:
 
 AddRange(ICollection) - Adiciona a coleção de elementos ao final da ArrayList
 
 InsertRange(int index,ICollection) - Adiciona a coleção de elementos na ArrayList na posição do índice especificado
 
 var lista2 = new ArrayList() { "Bob",6,false,null};

int[] array1 = { 1, 2, 3 };

lista2.AddRange(array1);

lista2.InsertRange(2, array1);



 
 # -- ArrayList - Remover Elementos
 
Podemos remover elementos de um ArrayList usando os métodos:

Remove(Object value) --> Remove a primeira ocorrência de um objecto/valor especifico

RemoveAt(int index) --> Remove o elemento no índice especificado

RemoveRange(int index,int count) - Remove um número definido de elementos a partir de um índice especificado


Ex:

var lista = new ArrayList() {"Ana",5,true," ",null,1.1,"Zé",3,9,0};

lista.Remove(null); --> {"Ana",5,true," ",1.1,"Zé",3,9,0};
lista.RemoveAt(4); --> {"Ana",5,true," ","Zé",3,9,0};
lista.RemoveRange(0,2); --> {true," ","Zé",3,9,0};



Console.ReadKey();

 
 
 
# -- ArrayList - Verificar se um elemento esta na coleção


Podemos usar o método Contains para determinar se um elementos especificado existe na ArrayList ou não.

O método retorna True se existir caso contrário retorna False



ex:

var lista = new ArrayList() { "Maria", 5, true, 4.5, null, DateTime.Now };

var res1 = lista.Contains(5);

var res2 = lista.Contains(null);

bool res3 = lista.Contains(45);

bool res4 = lista.Contains("Maria");




# -- ArrayList - Ordenação e Remoção de Todos os Elementos

Para odernar uma ArrayList com elementos do mesmo tipo na ordem ascendente usamos o método Sort(). (usa o algoritimo quicksort)

Sort() --> Ordenar elementos do mesmo tipo em ordem ascendente

Clear() --> Limpar elementos array, sem alterar o capacity

var lista2 = new ArrayList() {"Maria","Ana","Zilda","Carlos","Dina"};

lista2.Sort();

lista2.Clear();

Console.ReadKey();





# -- Recomendação

ArrayList -- objetivo tratar coleções heterogeneas, porem seu desempenho não é bom

List<T> -- > Nova maneira de tratar com lista heterogeneas









# -- Coleção List<T> I


List<T> --> Coleção de objetos fortemente tipados que podem ser acessados usando um índice que inicia em zero,
e possui métodos para classificar , pesquisar, modificar e manipular listas.


Esta coleção é a versão genérica da coleção ArrayList, sendo equivalente a ela, e esta presente no namespace
System.Collections.Generic


A classe List<T> pode ser usada para criar uma coleção de tipos diferentes, onde T representa o tipo do objeto que
pode ser inteiro,string,double,etc., e também pode ser um tipo complexo como uma classe definida pelo usuário.

ArrayList e List são indexados, posso acessalos pelo indice





-- List<T> - Caracteristicas 

Uma List<T> pode conter elementos do tipo especificado por T, fornece verificação de tipo em tempo de compilação
e não executa boxing-unboxing porque é genérica.

Os elementos podem ser adicionados a uma list<T> usando os métodos Add(),AddRange(),Insert e InsertRange() ou usando
a sintaxe de inicializador de coleção.

Uma List<T> é uma estrutura dinâmica que pode ser redimensionada

Uma List<T> inicia vazia e seus elementos são alocados sob demanda

Uma List<T> como Arrays e ArrayList são tipos de referencia: uma variavel refere-se ao objeto real, que deve ser instanciado
na memória Heap.







-- List<T> - Declaração, instanciação e inclusão de elementos

Para criar uma List<T> temos que especificar o parâmetro de tipo T para definir o tipo dos elementos que desejamos armazenar,
usar a palavra-chave new e a seguir podemos usar o método Add para incluir elementos ou podemos usar os inicializadores
de coleção para criar uma List<T> em uma única etapa.

Exemplos de declaração:

count = 0
capacity = 0

List<string> list;
list = new List<string>();

List<int> list2 = new List<int>();

List<double> list3 = new();

var list4 = new List<float>();

list4.Add(3);

List<string> list5 = new List<string>() 
{ 
 "Álife","Bob","Lucas"
};











# -- Coleção List<T> II

List<T> - Principais Métodos

Inclusão de itens: Add(T) e Insert(int index,T value)

Inclusão de coleções : AddRange(ICollection) e InsertRange(int index,ICollection)

Iteração na List : laço for (Count) e laço foreach

Verificar se um elemento esta na lista : Contains(T)

Remoção de itens : Remove(T value), RemoveAt(int index)  e RemoveRange(int index,int count)

Ordenação da lista e remoção e todos os elementos da lista : Sort() e Clear()


list --> ["Jax","Fiora","Zac","Cassia","Álife","Cassia","Bob","Richard","Bob","RR", "Gustavo", "Morandi"]

list --> ["Jax","Zac","Cassia","Álife","Cassia","Richard","RR","Bob", "Gustavo", "Morandi"]














# -- List E ArrayList

Value Type : Armazena diretamente os dados atribuidos na memória Stack
Exemplos:int,double,float,long,DateTime,struct,etc

Reference Type : Armazena uma referência para os dados atribuídos na memória Heap
Exemplos: string,Array,ArrayList,List<T>, class , classes definidas pelo usuário, etc.


Boxing: É a conversão de um Value Type para um reference Type

int num = 23;
Object obj = num;

Unboxing: É quando um reference Type(object) volta a ser um Value Type

int num = 23;
Object obj = num;
int i = (int)obj;




 -- Comportamento ArrayList
 
 Uma coleção arrays list pode armazenar diversos tipos de dados: Value Type e Reference Type
 
 Qualquer tipo de referencia ou valor adicionado a ArrayList é implicitamente convertido em System.Object
 
 Se os itens são tipo valor ele devem sofrer boxing quando adicionados a coleção, e unboxing quando recuperados da coleção
 
 Boxing e Unboxing são operaçoes que degradam o desempenho ao percorrer grandes coleçoes 
 
 
 
 
 -- Comportamento da List<T>
 
 
 A coleção List<T> é uma coleção de objetos fortemente tipados onde T representa o tipo dos dados dos elementos que serão armazenados
 
 o Paramentro de tipo T pode ser um tipo por valor ou tipo de referencia
 
 Na coleção List<T> não precisa de boxing e unboxing os itens não são convertidos para System.Object e tambem permiter o compilador fazer verificação de tipo
 
 ex:
 
ArrayList lista = new ArrayList();  

lista.Add(3);
lista.Add(105);

var elemento = lista[0];
int el = lista is not null ? (int)lista[1] : 0;


List<int> lista2 = new List<int>();
lista2.Add(5);
lista2.Add(4);

var elemento2 = lista2[0];
var el2 = lista2[1];    


List<T> é mais segura e rapida do que a arraylist, especialmente quando os itens da lista são tipo valor



List<T>                                                                 ArrayList

System.Collections.Generic								        System.Collection
Coleção de objetos fortemente tipados							   Coleção que pode armazenar itens de diversos tipos de dados. Não é fortemente tipado
Não realiza operação de boxing e unboxing 						   Realiza unboxing e boxing
Apresenta melhor desempenho								   Apresenta um desempenho menor
Apresenta seguraça de tipo									   Não apresenta segurança de tipo
Recomendado para tratar objetos homogêneos e heterogêneos			   Seu uso deve ser evitado












# -- List - Métodos Find



predicado --> função/método de argumento único que retorna um valor booleano

Find(), FindLast(), FindIndex(), FindLastIndex() , FindAll();

Find() -->  retorna o primeiro elemento que corresponde ao predicado fornecido
 
FindLast() --> retorna o ultimo elemento que corresponde ao predicado fornecido

FindIndex() --> retorna o indice do primeiro elemento que corresponde ao predicado fornecido. Ele retorna -1 se não houver correspodência encontrada

FindLastIndex() --> retorna o indice do ultimo elemento que corresponde ao predicado fornecido. Ele retorna -1 se não houver correspondecia encontrada

FindAll() --> Recupera todos os elementos que correspondem ás condições definidas pelo predicado especificado




Ex:

List<string> frutas = new() {"Uva","Banana","Maça","Abacate","Laranja","Morango"};

var fruta1 = frutas.Find(Procura);
Console.WriteLine(fruta1);

Console.ReadKey();


static bool Procura(string item)
{
    return item.Contains('n');
}




A função/metodo é passado para o Find para definir o criterio de busca, sendo o parametro da função Procura a propria lista de frutas


Ao invés de criar uma função que retorna true ou false podemos usar uma expressão lambda





-- Expressão Lambda



Uma expressão lambda é uma função anônima

Para criar uma expressão lambda, devemos especificar: 
- os parâmetros e entrada no lado esquerdo do operador lambda (=>)
- e definir a expressão ou bloco de instruções do lado direito do operador lambda

Ex: x => x * x   --> Define um parâmetro chamado x e retorna o valor de x ao quadrado

var resultado = frutas.Find(f => f.Contains("n"));



ex:

Console.WriteLine("Métodos Find");


List<string> frutas = new() {"Uva","Banana","Maça","Abacate","Laranja","Morango"};

var fruta1 = frutas.Find(Procura);
Console.WriteLine($"\n(Find) Predição => {fruta1}");

var fruta2 = frutas.Find(f => f.Contains('n'));
Console.WriteLine($"\n(Find) Lambda => {fruta2}");

var fruta3 = frutas.FindLast(f => f.Contains('n'));
Console.WriteLine($"\n(FindLast) => ${fruta3}");

var fruta4 = frutas.FindIndex(f => f.Contains('n'));
Console.WriteLine($"\n(FindIndex): indice:{fruta4} item={frutas[fruta4]}");

var fruta5 = frutas.FindLastIndex(f => f.Contains('n'));
Console.WriteLine($"\n(FindLastIndex): indice:{fruta5} item={frutas[fruta5]}");

var fruta6 = frutas.FindAll(f => f.Contains('n'));

Console.WriteLine("\nFind All : ");
foreach (var fruta in fruta6)
{
    Console.Write($" {fruta}");
}


Console.ReadKey();

static bool Procura(string item)
{
    return item.Contains('n');
}











# -- List e IEnumerable


List<T> e principais métodos de consultas LINQ


Any() --> Determina se qualquer elemento de uma sequência existe ou atende a uma condição.(Determina se a coleção contém elementos)


FirstOrDefault() --> Retorna o primeiro elemento da coleção que satisfaz uma condição opcional. Retorna o valor padrão do tipo caso não encontre nenhum elemento


OrderBy() --> Classifica os elementos na coleção em ordem decrescente com base em uma determinada condição e retorna a coleção classificada


ToList() --> Recebe um tipo IEnumerable e o converte em um tipo List


Where() --> Retorna todos os elementos da coleção que satisfazem uma determinada condição. (execução adiada)







-- List x IEnumerable


IEnumerable<T>                                                  List<T>


Descreve comportamento								Implementa o Comportamento

Read-Only											Implementa acesso e alteração  de uma coleção

Método que retorna o proximo item da coleção				

Não precisa ter toda a coleção na memoria					Possui toda a coleção em memoria e  sabe quantos itens a coleção possui

Não sabe quantos elementos a coleção possui

Ao ser iterado em um foreach ele vai retornando o proximo item da coleçao

Dá ao compilador a chace de adiar a execução


exemplo 1 : 


// See https://aka.ms/new-console-template for more information
Console.WriteLine("List e IEnumerable");

var limiteCredito = new List<Limite>();

for (int i = 1; i < 15; i++)
{
     limiteCredito.Add(new Limite() { Numero = i});
}

var limitesComRestricao = limiteCredito.Where(x => x.AnalisaLimite()); --> isso é um IEnumerable, porque eu não sei o tamanho da coleção devido a coleção ter muitos elementos ou ser gerado  dinamicamente


Console.WriteLine("\nFim do processamento");
public class Limite
{
    public int Numero { get; set; }
    public bool isRestricao;

    public Limite() 
    {
        var semente = Guid.NewGuid().GetHashCode();
        var numeroAleatorio = new Random(semente).Next(1, 4);
        isRestricao = numeroAleatorio == 1;

    }
    public bool AnalisaLimite()
    {
        Console.WriteLine($"Executa análise de limite de Crédito para o limite {Numero}");
        return isRestricao;
    }
}




exemplo 2 : 

// See https://aka.ms/new-console-template for more information
Console.WriteLine("List e IEnumerable");

var limiteCredito = new List<Limite>();

for (int i = 1; i < 15; i++)
{
     limiteCredito.Add(new Limite() { Numero = i});
}

var limitesComRestricao = limiteCredito.Where(x => x.AnalisaLimite()).ToList(); --> ao colocar o tolist eu implmento o ienumerable,agora eu sei o tamanho da lista e seus elementos

Console.WriteLine("\nFim do processamento");
public class Limite
{
    public int Numero { get; set; }
    public bool isRestricao;

    public Limite() 
    {
        var semente = Guid.NewGuid().GetHashCode();
        var numeroAleatorio = new Random(semente).Next(1, 4);
        isRestricao = numeroAleatorio == 1;

    }
    public bool AnalisaLimite()
    {
        Console.WriteLine($"Executa análise de limite de Crédito para o limite {Numero}");
        return isRestricao;
    }
}


exemplo 3 :


ao percorrer ienumerable eu exibo a coleção duas vezes, pois o ienumerable não tem toda coleção na memoria

ao pecorrer o ienumerable com toList, os valores são guardados na memoria, mostrando a coleção apenas uma vez


var limitesComRestricao = limiteCredito.Where(x => x.AnalisaLimite());

var limitesComRestricao = limiteCredito.Where(x => x.AnalisaLimite()).ToList();


if(limitesComRestricao.Count() > 3)
{
    Console.WriteLine("\n ### Temos mais de 3 linhas com restrição");
}

if(limitesComRestricao.Count() > 5)
{
    Console.WriteLine("\n ### Temos mais de 5 linhas com restrição");

}




-- Cenario em que um IEnumerable é bom

no caso abaixo, o codigo vai retornar o primeiro valor da coleção ou padrão,porem ele vai percorrer toda a coleção,exibindo todos os dados

var limitesComRestricao = limiteCredito.Where(x => x.AnalisaLimite()).ToList();

var primeiroLimiteComRestrição = limitesComRestricao.FirstOrDefault();

Console.WriteLine($"\n##{primeiroLimiteComRestrição?.Numero}");


-- porem com ienumerable ele vai encontrar o primeiro valor ou padrão, e vai exibir o primeiro, sem precisar percorrer toda coleção para exibir tudo

var limitesComRestricao = limiteCredito.Where(x => x.AnalisaLimite())

var primeiroLimiteComRestrição = limitesComRestricao.FirstOrDefault();

Console.WriteLine($"\n##{primeiroLimiteComRestrição?.Numero}");





-- Quando usar ToList ou IEnumerable ? 


IEnumerable :
Uma unica consulta nos dados,sem precisar modificar varias vezes, porque ienumerable não tem seus valores avaliados, e tem execução adiada

List:
Quando preciso acessar o resultado de uma consulta Linq varias vezes ou modificar os dados,porque os dados serão armazenados na memoria e avaliados pelo ToList();

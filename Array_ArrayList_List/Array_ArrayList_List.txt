
# -- Apresentação



Coleções --> formam uma importante estrutura de dados para criar e gerenciar grupos de objetos relacionados

Existe duas maneiras de agrupar objetos:

1 - Criando Arrays de Objetos
2 - Criando Coleções de Objetos

Os arrays são uteis para criar e trabalhar com um número fixo de objetos do mesmo tipo

As coleções fornecem uma maneira mais flexivel de trabalhar com grupos de objetos



1 - Coleções não genericas presentes no namespace System.Collections:

ArrayList,Stack,SortedList,Queue,Hashtable, etc.


2 - As coleções Genéricas presentes no namespaces System.Collections.Generic:

List,SortedList,Stack,Queue,HashSet,SortedSet,Dictionary,SortedDictionary






# -- Arrays


Os arrays são um conjunto de elementos de mesmo tipo de dados e de tamanho fixo

Um array de uma dimensão é conhecido como vetor,enqunato de mais de uma dimensão e conhecido como matriz

Array é usado para armazenar mais de um valor literal do mesmo tipo em uma variável de mesmo nome




sintaxe array:

tipo dos elementos abrindo e fechando colchetes seguido do nome da variável que identifica o array

TipoDados[] NomeDoArray;




ex:

int[] numeros; --> sem alocar valor

int[] numeros = new int[10] {1,2,3,4,5,6,7,8,9,10}; --> atribuindo valor

string[] nomes;

string[] nomes = new string[5] {"Maria","Eva","Pedro","Ana","Ada"}


//declaração do array
int[] numeros;

//alocação memoria
numeros = new int[10] {1,2,3,4,5,6,7,8,9,10};



Simplificação:

string[] nomes = new string[5] { "Maria", "Marta", "Roberta", "Dhen", "Ruby" };

string[] nomes1 = new string[] { "Maria", "Marta", "Roberta", "Dhen", "Ruby" };

string[] nomes2 =  { "Maria", "Marta", "Roberta", "Dhen", "Ruby" };





-- Acessando os elementos do array


Os elementos do array podem ser acessados usando um índice

Um índice é um número associado a cada elemento da matriz, começando com o valor 0 e terminando com o tamanho do array menos - 1


int[] numeros = new int[] {1,2,3,4,5,6,7,8,9,10};

		Array com elementos do tipo int
	     [1,2,3,4,5,6,7,8,9,10]
indice	 0,1,2,3,4,5,6,7,8,9
	

numeros[7] --> 8
 
           [Maria,Eva,Pedro,Ana,Ada]
 indice       0    1   2     3   4
 
nomes[1] --> Eva



int[] numeros = new int[10] --> sera criado 10 elemementos com valor zero por padrão,se for string sera null por padrão

se eu tentar atribuir um valor fora dos limites do array ocorrera um erro --> Index was outside the bounds of the array








# -- Arrays II



-- Acessando os elementos de um Array usando uma laçõ for

Podemos usar um laço for para percorrer elementos de um array

Usamos a proprieadade Length da classe Array para definir o tamanho do Array no laço for

A classe Array esta no namespace System e fornece diversas propriedades e métodos para trabalhar com um array
(Length,Rank,Copy,Clear,Sort,etc)


ex:

string[] nomes = { "Ana", "Maria", "Marta", "Paulo", "Carlos" };
int[] numeros = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10 };

for (int i = 0; i < numeros.Length; i++)
{
    Console.WriteLine($"Elemento de índice {i} : {numeros[i]}");
}
Console.WriteLine("-------------------------------------------");
for (int i = 0;i < nomes.Length; i++)
{
    Console.WriteLine($"Elemento de índice {i} : {nomes[i]}");
}




# -- Arrays III

-- Acessando os elementos de um array usando um laço foreach

Podemos usar o laço foreach para ler/recuperar elementos de um array sem precisar usar o índice nem definir o tamanho do array

A instrução foreach permite executar uma instrução ou um bloco de instruções para cada elemento presente em uma coleção (Array,List,ArrayList,Stack,Queue,etc)

Sintaxe:

foreach(tipo elemento in coleção)
{
  // instrução ou bloco de instruções
}


em parenteses criamos um elemento do tipo utilizado na coleção e, com operador in, informamos a coleção a ser percorrida


vantagens foreach:

- não precisamos definir a inicialização
- não precisamos definir uma condição de parada pois isso é definido de forma implícita,pelo tamanho da coleção
- a instrução foreach usa a palavra-chave 'in' para iterar sobre cada item da coleção
- o número de iterações do laço foreach é igual ao total de itens da coleção





# -- Classe Array


Fornece metodos para trabalhar com arrays

Classe base para os arrays

Metodos Principais:

Reverse --> Inverte a sequencia de um array unidimensional

Ex: Array.Reverse(nome_array);

2 - Sort - Ordena os arrays

Ex: Array.Sort(nome_array);

3 - BinarySearch - Faz a busca em um array ordenado de um valor usando o algoritimo de busca binário. Se for encontrado será retornado o valor do índice do elemento,
caso contrario será retornado um número negativo

Array.BinarySearch(nome_array,objeto)





Exemplos:


string[] nomes = { "Ana", "Maria", "Dinair", "Paulo", "Carlos", "Beatriz" };

Console.WriteLine("Exibindo o array original\n");

ExibeArray(nomes);

Console.WriteLine("Invertendo ordem do array\n");

Array.Reverse(nomes);
ExibeArray(nomes);

Console.WriteLine("Ordenando Array \n");
Array.Sort(nomes); 
ExibeArray(nomes);

Console.WriteLine("Localizando item array");
string? nome = Console.ReadLine();

var indice = Array.BinarySearch(nomes, nome);

if(indice >= 0)
{
    Console.WriteLine($"{nome} foi encontrado com índice = {indice}");
}
else
{
    Console.WriteLine($"{nome} não foi encontrado");
}


static void ExibeArray(string[] nomes)
{
    foreach (string nome in nomes)
    {
        Console.WriteLine(nome);
    }
}






# - Modificador Params


Maneira de criar um numero ilimitado de argumentos

Aceita um numeros variado de argumentos

Precisa de um array unidimesional

nenhuma parametro adicional é permitido apos a declaração do params

apenas uma palavra chave params é permitida

Deve ser o ultimo argumento na lista de parâmetros do método

se o array for não for unidimensional sera retornado um erro CS0225




Ao colocar params do metodo,podemos passar:

Uma lista separada por vírgulas de argumentos do tipo dos elementos do array

um array de argumentos do tipo especificado

se não tiver nenhum argumento, o comprimento da lista de parâmetros será zero




exemplo de uso:

NomeDoMetodo(param tipo[] nomeVariavel){}

MeuMetodo(string a,int b,int c = 1, params int[] numeros) {}




sem params:

int[] valores = { 1, 2, 3 };

var resultado = Calcular.Soma(valores); --> passo array na chamada do metodo
Console.WriteLine(resultado);

public class Calcular
{
    public static int Soma(int[] numeros)
    {
        int total = 0;

        foreach (var numero in numeros)
        {
            total += numero;    
        }
        return total;
    }
}




com params:


int[] valores = { 1, 2, 3 };

var resultado = Calcular.Soma(valores);
Console.WriteLine(resultado);


var res2 = Calcular.Soma(1,2,3,4,5,6); --> passo os valores diretamente na chamada do metodo

Console.WriteLine(res2);

public class Calcular
{
    public static int Soma(params int[] numeros)
    {
        int total = 0;

        foreach (var numero in numeros)
        {
            total += numero;    
        }
        return total;
    }
}














# -- Arrays MultiDimensionais



C# suporta arrays de ate 32 dimensões 

Um array com mais de uma dimensão é basicamente um array de array

Um array multidimensional pode ser declarado adicionando virgulas entre colchetes na declaração do array


Tipo [,] nome --> bidimensional --> Ex: int[,] array2d;

Tipo [,,] nome --> tridimensional --> Ex: int[,,] array3d;

Tipo [,,] nome --> quadridimensional --> Ex: int[,,,] array3d;



Array Bidimensional --> tabela

Ex int[3,3] a; -->  3 linhas e 3 colunas



-- Identificação de elemento no array


               coluna 0            coluna 1      coluna 2

linha 0        a[0,0]               a[0,1]       a[0,2]


linha 1        a[1,0]               a[1,1]       a[1,2]


linha 2        a[2,0]               a[2,1]       a[2,2]



Cada elemento no array é identificado por um nome de elemento na forma a[i,j]

a -> nome do array

i -> linha

j -> coluna





-- Array Bidimensional - Declaração

int[,] array1 = new int [3,3];

Bidimensional

3 linhas e 3 colunas

array1 pode armazenar apenas 9 elementos. (3 * 3)




-- Array Bidimensional - Inicialização


int [,] a;       a=> null

a = new int[2,2]; --> atribui valores padrão que é zero

a = new int[2,2] {{1,2},{2,3}};

a = new int[2,2] {
			{0,1},
			{2,3}
			};

int[,] a = {{0,1} {2,3}}; --> maneira simplificada



exemplo:

// See https://aka.ms/new-console-template for more information
Console.WriteLine("Arrays MultiDimensionais");


int[,] a;

a = new int[2, 2];


a[0, 0] = 10;
a[0, 1] = 11;
a[1, 0] = 12;
a[1, 1] = 13;


Console.WriteLine(a[0,0]);
Console.WriteLine(a[0,1]);
Console.WriteLine(a[1,0]);
Console.WriteLine(a[1,1]);


int[,] b = new int[2, 2] { {20,30}, {40,50} };

Console.WriteLine(b[0, 0]);
Console.WriteLine(b[0, 1]);
Console.WriteLine(b[1, 0]);
Console.WriteLine(b[1, 1]);








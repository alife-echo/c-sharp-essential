# Processo de compilação e execução usando CLR

c# -> É uma linguagem tipada,compilada e gerenciada


----------- Compilação -------------,---------- Execução ---------------
Código C# --> Compilador C# --> IL Code --> JIT compiler --> native code

IL = codigo de lingaguem intermediaria em bytecode
IL Code = Teste.exe e Teste.dll

O compilador gera seu codigo para IL, enquanto o JIT compiler gera o codigo para native code sendo gerenciado pelo CLR e executado pelo processador 





# -- SINTAXE C#

//  ->  Comentário em uma linha

/**/ -> bloco de comentario

{} -> Delimitador de bloco de comandos

; -> todos os comandos "simples" terminam com ;

= -> atribuição

== -> Comparação de igualdade






# -- Organização de Codigo

Projeto --> um projeto pode ter varias classes, uma classe com uma responsabilidade usamos namespaces para organizar as classes

Namespaces --> contâiners logicos para as classes e outros namespaces

namespaces --> usamos namespaces para agrupar as classes relacionadas


Ex:

Namespaces com mesma classe

Fornecedores.Cadastro

Produtos.Cadastro     

Categorias.Cadastro

Utilizando a notação ponto '.' eu posso referenciar uma classe a um namespace, posso ter varias classes Cadastro, mas cada cadastro vai pertencer a um namespace especifico



sintaxe:

nome_do_namespace.nome_da_classe

outros maneiras:

nome_do_namespace.nome_do_namespace.nome_da_classe

posso ter nameespace dentro de namespaces


using --> uso para simplificar os namespaces

Ex:

using nome_do_namespace

nome_da_classe


solution --> container para projetos criados no visual studio
solution --> pode conter um ou mais projetos






# -- Estruturas de pastas

Dentro do arquivo de solução:

Arquivo de solução que mantém a informação sobre a organização dos projetos na solução

 
Dentro da pasta de projeto:


bin --> Contém arquivos binários, que são o código executavel real para seu aplicativo ou biblioteca

obj -> Contém arquivos objeto, ou intermediários, que são arquivos binários compilados que ainda não foram vinculados

arquivo de projeto -> Contém informações sobre os arquivos incluídos no projetos, assemblies usados, GUID do projeto e versão do projeto



# -- Principais Comandos

dotnet --info -> lista informações detalhadas do sistema

dotnet --version -> exibe a versão do .NET SDK atual

dotnet --list-sdks -> exibe a lista dos sdks instalados

dotnet --list-runtimes -> exibe a lista dos runtimes instalados

dotnet new list -> Lista todos os templates de projetos

dotnet new <nome_template> -> cria um projeto usando o template informado

dotnet run -> Executa projetos

dotnet restore -> Restaurar os pacotes do projeto

dotnet test -> Executa projetos de teste e testes de unidade

dotnet publish -> usado para publicar projetos

dotnet new sln -> cria uma nova solution

dotnet sln add/remove -> Adiciona/Remove projetos para solução

dotnet add/remove reference -> adiciona/remove referência de projetos para outros projetos

dotnet add/remove package -> adiciona referência de pacotes Nuget para um projeto







# Instalando um projeto com uma versão especifica

crie uma pasta

dentro da pasta rode o comando:

sintaxe:
dotnet new globaljson --sdk-version numeroversaosdk --force

exemplo:
dotnet new globaljson --sdk-version 7.0.1 --force


dentro da mesma pasta criar seu projeto





# Instalando projeto com uma versão especifica 2


dotnet new console -o MeuApp2 -f net5.0 --> criando o projeto e especificando a versão

dotnet new console -o MeuApp3 --use-program-main --> criar um projeto no dotnet atual, porem usando o método main, a estrutura de codificação abaixo do net6.0, sem top level stateman






# -- Criar projeto e solução igual ao visual studio


Observação: crie uma pasta primeiro e faça tudo dentro dela

- criar solução
dotnet new sln -o <nome_solução>

- criar projeto dentro de solução
dotnet new <nome_do_template> -o <nome_projeto>

- incluir o projeto criado na solução existente(a partir da pasta da solução)
dotnet sln <nome_solução>.sln add <pasta_projeto>/<arquivo>.csproj

start minhaSolucao.sln --> abrir solução com projeto dentro


# -- Atalhos C#

CTRL + F5 --> Executar codigo sem depuração

F5 --> Executar codigo com depuração]

CTRL + K + D --> Organizar código

CTRL + D --> Duplicar linha onde cursor esta

CTRL + F --> Localizar algo no documento atual



# -- Tipos de dados de referência e de valor

Tipos de referência --> Não armazenam os dados diretamente, cada variavel contém uma referência ao local da memória onde os dados estão dados estão armazenados

Tipos de valor --> Armazenam diretamente seus dados e cada variável tem sua própia cópia dos dados

Os tipos de dados são armazenados na memória Stack(LIFO - Last in First Out)


Sinxtaxe declaração

tipo nomeVariavel = valor;
tipo nomeVariavel; --> não inicializado





# -- Tipos numéricos integrais

palavra-chave/tipo c#       intervalo            tamanho                 Tipo.NET

sbyte			  -128 a 127	   Inteiro de 8bits com sinal	 System.SByte
-------------------------------------------------------------------------------------
byte			  0 a 255	  Inteiro de 8bits sem sinal    System.Byte
-------------------------------------------------------------------------------------
short                   -32.768 a 32.767   Inteiro de 16 bits com sinal System.Int16
-------------------------------------------------------------------------------------
ushort                  0 a 65.535        Inteiro de 16 bites sem sinal System.Uint16
-------------------------------------------------------------------------------------
int          -2.147.483.648 a 2.147.483.647    Int assinado com 32 bits System.Int32
-------------------------------------------------------------------------------------
uint	      0 a 4.294.967.295      Int assinado com 32 bits sem sinal System.Uint32
-------------------------------------------------------------------------------------
long -9.223.372.036.854.775.808 a 9.223.372.036.854.775.807 Int ass de 64bi System.Int64
-------------------------------------------------------------------------------------
ulong 0 a 18.446.744.073.709.551.615   Inteiro de 64 bits sem sinal     System.Uint64
-------------------------------------------------------------------------------------
nint             Depedende plataforma  Inteiro com sinal de 32/64 bits  System.IntPtr
-------------------------------------------------------------------------------------
nuint            Depedende plataforma  Inteiro sem sinal de 32/64 bits  System.UIntPtr
-------------------------------------------------------------------------------------



# -- Tipos pré-definidos : Tipos numéricos de ponto flutuante


palavra-chave/tipo c#     Tamanho       Tipo .NET

float		       	  4bytes	System.Single
double			  8bytes	System.Double 
decimanl		  16bytes	System.Decimal


representações

double valor = 12.4;		float valor = 12.4F;		 decimal valor = 12.4M;
System.Double valor = 12.4;	System.Single valor = 12.4f;	 System.Decimal valor = 12.4m;

- Caracteristicas
	
Armazenados na stack
Valor padrão 0
Suporte a operadores aritimeticos de comparação ->   (>,<,>=,<=,!=) e (==)
double -> para calculos cientificos
decimal -> para calculos financeiros

tipos de inicialização com literais (f-F,d-D,m-M)

# -- Comandos

Console.WriteLine(); --> mostrar um valor na tela do terminal
Console.ReadLine(); --> Espera que o usuario digite para terminar o codigo no terminal



# -- Tipos pré-definidos : Tipos não numéricos

valor padrão do bool é false
valor padrão do tipo char é '\0'
(U + 0000) -> NULL

				     Tipo .NET

bool  --> true or false -> 8 bits -> System.Boolean
char --> U+0000 A U+FFFF -> 16 bits -> System.Char

'' --> aspas simples char
"" --> aspas duplas string


Ex:

bool ativo = true;			char letra = 'A';
System.Boolean ativo = true;		System.Char letra = 'A';


# -- Tipos de referência

string      armazenamento de zero ou mais caracteres   System.String
object     é o tipo base para todos os outros tipos  System.Object
dynamic   resolvido em tempo de execuçao            System.Object


dynamic -> util para reflection e dlr

string são imutáveis

string valor = "Isto é uma string";
valor = "Isto é uma string alterada";      --> 3 espacos da memoria
valor = "teste";


--> o valor não é reatribuido , ele cria espaço na memoria para cada atribuição ao valor que fiz



ex:

	string nome = "Curso Csharp Essencial";
	System.String nome = "Curso Csharp Essencial";	
		
	object nota = 10;
	object valor = 8.55m;
	object nome = 'alife';






# ----- DATE TIME


Caracteristica

- tipo valor
- valor padrão : 01/01/0001 00:00:00

dd/mm/aaaa hh:mm:ss --> pega o formato de data do seu sistema operacional



Ex:

DateTime data = new DateTime(2022,09,04)

new --> para criar um data especifica

sintaxe para definir data e hora -- > (aaaa,mm,dd,hh,mm,ss)

Ex: 
   DateTime  data = new DateTime(2022,09,04,11,10,20)



Pegar a data e o horario atual : 

DateTime data = DateTime.Now; --> log : 24/10/2023  21:00:44




Sem especificar horario:

DateTime dataHoje = new DateTime(2023, 10, 24); 
Console.WriteLine(dataHoje);  --> log : 24/10/2023 00:00:00


Especificando data e horario

DateTime dataHoraHoje = new DateTime(2023 , 10 , 24, 00, 23,01);
Console.WriteLine(dataHoraHoje);    



-- Operações com data e hora

1 - Extrair informações como dia, mês, hora , ano, etc

Year,Month, Day,Hour,Minute,Second,Millisecond


2 - Adicionar dias,horas,mês,anos,etc.

AddDays,AddHours,AddMonths,AddYears


3 - Obter dia da semana e do ano

DayOfWeek,DayOfYear


4 - Expressar data no formato longo e abreviado

ToLongDateString, ToShortDateString


5 - Expressar hora no formato logo e abreviado

ToLongHourString, ToShortHourString





Sintaxe :

DateTime hoje = DateTime.Now;
Console.WriteLine($"hoje : {hoje}\n");
// extrair informações da data atual
Console.WriteLine(hoje.Year);
Console.WriteLine(hoje.Month);
Console.WriteLine(hoje.Day);
Console.WriteLine(hoje.Hour);
Console.WriteLine(hoje.Second);
Console.WriteLine(hoje.Millisecond);

//adicionando valores
Console.WriteLine(hoje.AddDays(20));
Console.WriteLine(hoje.AddMonths(3));
Console.WriteLine(hoje.AddHours(2));
Console.WriteLine(hoje.AddYears(5));

//obter o dia da  semana e do ano
Console.WriteLine(hoje.DayOfWeek);
Console.WriteLine(hoje.DayOfYear);

// data no formato longo e curto
Console.WriteLine(hoje.ToLongDateString());
Console.WriteLine(hoje.ToShortDateString());





# --  Nullable Types


Tipos de valor

As variaveis do tipo : numéricos,char,bool,struct --> sempre possuem um valor e são armazenados na memória Stack

variável de um tipo por valor não pode conter o valor null(nulo)
valor padrão de um tipo valor é (zero)

int valor = 10;         


			  Stack            Heap
			valor = 10


int valor = null;    Error -> Cannot convert null to 'type' because it is a non-nullable value type


- Nullable Types ou Tipos Anuláveis


Importancia : 

Usado para representar um valor indefinido de um tipo, quando um tip sem valor for valido para o meu contexto

Usado em banco de dados quando um valor de variavel for indefinido ou ausente



Nullable Type = é um tipo de valor que pode receber um valor null
Nullable Types = ou Tipos Anuláveis permitem atribuir um valor null a um tipo de valor
 

Sintaxe

Nullable<T><nome> = null;           (T = int,double,float,bool,etc.)

Os Nullables Types suportam os valores do tipo mais o valor null

Exemplo:
	Nullable<bool>b= null; //suporta true,false e null


 - Simplificando

   int? i = null;
   double? d = null;
   bool? b = null;



- Nullable Types são diferentes do tipos por valor
 
Nullable Type int !== int

int é um tipo não anulável ou Non-Nullable Type
int? é um NullableType


int? a = null;
int b = a;
Console.WriteLine(b);

Error: Cannot implicity convert type int? 'to 'int'. An explicit conversion exists(are you missing a cast?)


Solução

?? -> coalescência nula

?? -> usar para atribuir um valor de tipo anulavel a um não anulavel

int ? a = null;

int b = a ?? 0; --> se 'a' for nulo ele atribui 'a' se não ele atribui zero

Console.WriteLine(b); 


Exemplos:

Problema
int? x = 4;
int y = 3;
int z = x * y;

Error: Cannot implicity convert type int? 'to 'int'. An explicit conversion exists(are you missing a cast?)



Minha solução
int? h = 4;
int j = 3;
int z = (h * j) ?? 0; 
Console.WriteLine(z);

Solução Aula
int? h = 4;
int? j = 3;
int? z = h * j;
Console.WriteLine(z);


# Propriedades somente leitura: HasValue e Value



São usadas para examinar e obter um valor de uma variável de Nullable Type

HasValue: true se tiver um valor, false se não tiver um valor(null)

Value: Exibe o valor atribuído

int? b = 100;
if(b.HasValue)
{
	Console.WriteLine($"b = {b.value}")
}
else 
{
	Console.WriteLine("b não possui valor");
}





# Convenções


CamelCase

Ex: valorDoDesconto , nomeCompleto

- Usado para nome de variáveis,parâmetros e campos internos e privados.



Pascal Case 

Ex : CalculaImpostoDeRendam ValorDoDesconto, NomeCompleto

Usado para classes,métodos,interfaces,proprieadades


Constantes - Usar letras maiúsculas.

Ex: PI,DESCONTO,VALOR,IMPOSTO


_ (Sublinhado) - usado para campos internos privados e somente leitura (camel case)

Ex : _valorTotal, _calculoImposto, _precoComDesconto



- identificadores válidos

string nome;
string nomeCompleto;
int idade;
int _valor;
int idade1;

- identificadores inválidos

int 5idade;
int $valor;
int valor#total;
string nome Completo;


- para nome de variáveis: camel case

string descontoTotal;
string desconto_Total;

- constantes : maiúsculas

double PI = 3.14;
string PREFIXO = "11";
string PREFIXO_SP = "11";

Console.ReadLine(); 


- para nomes de classe é métodos: pascal case
class ImprimirTexto
{
    public void ImprimeNome()
    {
        Console.WriteLine('Macoratti');
    }
}






# -- Saida de dados

Console.WriteLine(); --> Exibe um conteudo com quebra de linha
Console.Write(); --> Exibe conteudo sem quebra de linha


Console.WriteLine();
Console.WriteLine("-------------CONCATENAÇÃO---------------");

//Escreve na mesma linha 'Maria tem 25 anos'
// usar a concatenação : usando o operado +
Console.WriteLine(nome + " tem " + idade + " anos ");
Console.Write(nome + " tem " + idade + " anos ");


Console.WriteLine();
Console.WriteLine("-------------INTERPOLAÇÃO---------------");
//Escreve na mesma linha 'Maria tem 25 anos'
// usar a interpolação de srtings : $ -> interpolação {}
Console.WriteLine($"{nome} tem {idade} anos");
Console.Write($"{nome} tem {idade} anos");

Console.WriteLine();
Console.WriteLine("-------------PLACEHOLDER---------------");
// usar place holders : usa {} com numeração com inicio em zero
// numeração indica quem sera mostrado primeiro
Console.WriteLine("{0} tem {1} anos",nome,idade);
Console.Write("{0} tem {1} anos", nome, idade);






# SEQUENCIA DE ESCAPES

Combinação de caracteres que ajudam a especificar uma string

string local = "c:\\dados\\poesias.txt";
string frase = "Ele falou:\"Não fui eu\" \a";
string pizza = "\nPizza \nde \nMussarela ";
string bolo = "\nBolo \tde \tChocolate";

Console.WriteLine(frase);
Console.WriteLine(pizza);
Console.WriteLine(bolo);
Console.ReadLine();

//Formatação usando sequencias Escapses
/*
 
 \a   --> sinal sonoro (alerta)
 \b   --> Backspace
 \f   --> Alimentação de Formulário
 \n   --> Nova Linha
 \r   --> Carriage Return
 \t   --> Tabulação horizontal
 \v   --> Tabulação vertical
 \'  --> Aspas Simples
 \"  --> Aspas duplas
 \\  --> Barra invertida
 \?  --> Interrogação
 \u ooo --> ASCII unicode
 \x hh --> ASCII hexadecimal
 */







# ---> Conversões entre tipos



// C# --> Estaticamente tipado em tempo de compilação
// Apos uma variavel se declarada ela não pode ser redeclarada
// Não pode armazenar valores de outros tipos de dados
// A menos que o tipo da variavel possa ser convetido





--> Conversão Implícita 



// O C# faz a conversão automaticament  caso os tipos seja compativeis

//Conversão Explícita
// A conversão tem que ser feita manualmente


// A conversão automatica ocorre do menor tipo tamanho para uma maior tipo tamanho
// O oposto não e verdadeiro

// int --> double = ok 
// double --> int = error

//byte --> 1 byte
//short --> 2 bytes
//int --> 4 bytes
//long --> 8 bytes
//float --> 4 bytes
// double --> 8 bytes
// decimal -- 16 bytes


//Conversões implicitas
int varInt = 100;
double varDouble = varInt;
Console.WriteLine(varDouble);

int numeroInt = 2145678;
long numeroLong = numeroInt;
float  numeroFloat = numeroInt;
decimal numeroDecimal = numeroInt;
double numeroDouble = numeroInt;

Console.WriteLine(numeroInt);
Console.WriteLine(numeroLong);   
Console.WriteLine(numeroFloat);
Console.WriteLine(numeroDouble);
Console.WriteLine(numeroDecimal);   




--> Conversões Explicitas


Console.WriteLine("Conversões explicitas\n");
// Conversão de maneira manual
// Necessita de cast
// Cast definição do tipo a ser convertido usando (tipo) antes da variavel
double varDouble2 = 12.456; // 8 bytes
int varInt2 = (int)varDouble2; // 4 bytes (perda de precisão)
Console.WriteLine(varInt2);
//O resultado seria 2 pq foi convertido de flot para int
// usando o cast o resultado sera mostrando em float, 2,5
int num1 = 10;
int num2 = 4;
float resultado = (float)(num1 / num2);
Console.WriteLine(resultado);
Console.ReadLine();





--> Conversão de tipos 2

// conversão de tipos
// conversão para string
// ToString() --> converte para string

int valorInt = 123;
double valorDouble = 12.45;
decimal valorDecimal = 12.5678m;


string s1 = valorInt.ToString();
string s2 = valorDouble.ToString();
string s3 = valorDecimal.ToString();

Console.WriteLine(s1);
Console.WriteLine(s2);
Console.WriteLine(s3);

Console.WriteLine("\n-------------------------------\n");


// Conversão de tipos usando a classe Convert()
// ToBoolean() --> converte um tipo para valor booleano
// ToDouble() --> converte um tipo para o tipo double
// ToInt16() --> converte um tipo para o tipo 16-bit
// ToInt32() --> converte um tipo para o tipo 32-bit

int valorInt2 = 10;
double valorDouble2 = 5.35;
bool valorBoolean2 = true;

Console.WriteLine(Convert.ToString(valorInt2));
Console.WriteLine(Convert.ToDouble(valorInt2));
Console.WriteLine(Convert.ToString(valorBoolean2));
Console.WriteLine(Convert.ToInt32(valorDouble2));
Console.ReadLine();


// Erros de convesão

int varInt = 10000;
Console.WriteLine(Convert.ToByte(varInt));
// Error --> System.OverflowException 
// 'Value was either too large or too small for an unsigned byte'
// Estou tentando converter um int com intervalo de -2.147.483.648 a 2.147.483.647
// Para byte que é de 0 a 255









# -- Entrada de dados



// See https://aka.ms/new-console-template for more information
Console.WriteLine("\n ## Entrada de dados");

//ReadLine(): le a linha digitada e retorna o que foi digitado
//Read(): le o que foi digitado(um unico caractere) e retorna o valor em ASCII correspodente
//ReadKey():le apenas um caractere, usando para segurar a tela até que o usuário pressione uma tecla

Console.WriteLine("\n Informe o seu nome");

string nome = Console.ReadLine() ?? "";

Console.WriteLine($"\nO seu nome é {nome}");

Console.WriteLine($"\n Informe sua idade {nome}");

int idade = Convert.ToInt32(Console.ReadLine());

Console.WriteLine($"\n A idade de {nome} é {idade}");

Console.ReadKey();











# - Operadores aritimeticos




// See https://aka.ms/new-console-template for more information
Console.WriteLine("Operadores Aritimeticos \n");

Console.WriteLine("Informe o valor de x");
int x = Convert.ToInt32(Console.ReadLine());

Console.WriteLine("Informe o valor de y");

int y = Convert.ToInt32(Console.ReadLine());

const double PI_NUMBER = Math.PI;
const double E_NUMBER = Math.E;

Console.WriteLine($"\n Raiz Quadrade de x = {Math.Sqrt(x)}");
Console.WriteLine($"\n Potencia de x = {Math.Pow(x,y)}");
Console.WriteLine($"\n Valor minimo entre x e y = {Math.Min(x,y)}");
Console.WriteLine($"\n Valor Maximo entre x e y = {Math.Max(x,y)}");
Console.WriteLine($"\n Conseno de x = {Math.Cos(x)}");
Console.WriteLine($"\n Seno de x  = {Math.Sin(x)}");
Console.WriteLine($"\n Exponencial de x  = {Math.Exp(x)}");



Console.ReadKey();

//Operações basicas 

//Console.WriteLine($"Soma de x+y = {x+y}");
//Console.WriteLine($"Subtração de x-y = {x-y}");
//Console.WriteLine($"Multiplicação de x*y = {x*y}");
//Console.WriteLine($"Divisão de x/y = {(double)x/y}");
//Console.WriteLine($"Módulo de x%y = {x%y}");











# -- Inferencia tipos



Console.WriteLine("## Inferencia tipos ##\n");

var idade = 25;
var nome = "Maria";
var salario = 2500.00m;

os tipos serão definidos pela propria linguagem

Console.WriteLine($"Maria tem {idade} anos e ganha {salario.ToString("c")}");

// var limitações
var sal = null; // --> não é possivel atribuir um valor null
// -->Cannot assign 'expression' to an implicitly typed local

var titulo; // --> não é possivel só declarar a chave
// --> Implicitly typed locals must be initialized


var salario, imposto, total; // --> não é possivel encadear variaveis
// --> Implicitly-typed variables cannot have multiple declarators.
// --> Implicitly typed locals must be initialized



// não posso mudar o tipo apos inicializar
//Cannot implicitly convert type 'type' to 'type'
var num = 10;
num += 20;
num = "teste";


// posso utilizar o recurso na criação de classes
var test =  new Test();
test.MeuMetodo();
class Test
{
    public void MeuMetodo()
    {
        Console.WriteLine("Meu Método");
    }
}


// #  USOS DO VAR
// sugar syntax
// usado para declarar tipos anonimos
// usado em lações for e foreach
// usada em instruções using







# -- Operadores de atribuição

Console.WriteLine("Operadores de atribuição\n");

// usando operadores atribuição com tipos numéricos

var x = 10;
var y = "123";
y += "456";
Console.WriteLine($"Valor inicial de x={x}");
Console.WriteLine($"x+=5 ==> {x+=5}");
Console.WriteLine($"x-=5 ==> {x-=3}");
Console.WriteLine($"x*=4 ==> {x*=4}");
Console.WriteLine($"x/=5 ==> {x/=5}");
Console.WriteLine($"x%=5 ==> {x%=5}");
Console.WriteLine(y);









# -- Constantes



// See https://aka.ms/new-console-template for more information
Console.WriteLine("Constantes");

// Constantes são valores imutaveis que são conhecidos em tempo de comppilação e não mudam durante a vida útil do programa

// usam a palavra reservada const

// constantes são inicilizadas em caixa alta

// obrigatirio chave/valor

const int ANO = 12;

const int MES = 30, SEMANA = 7, QUINZENA = 15;

const int MESES_ANO = 12;
const int DIAS_ANO = 365;

const float DIAS_POR_MES = (float)DIAS_ANO / (float)MESES_ANO;

double raio, perimetro, area;

Console.WriteLine("Informe o raio do circulo : ");
raio = Convert.ToDouble(Console.ReadLine());

perimetro = 2 * Math.PI * raio;
area = Math.PI * Math.Pow(raio,2);


Console.WriteLine($"Perímetro = {perimetro}");
Console.WriteLine($"Área  = {area}");




 

